name: CoreState v2.0 Release Orchestration

on:
  push:
    tags:
      - 'v2.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - canary

env:
  DOCKER_REGISTRY: ghcr.io
  KUBERNETES_CLUSTER: corestate-prod
  ML_TRAINING_CLUSTER: ml-cluster-prod

jobs:
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [ 'apps/android', 'services', 'module', 'apps/daemon' ]
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '${{ matrix.component }}'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  build-android:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build Android App
        run: |
          chmod +x gradlew
          ./gradlew :apps:android:androidApp:assembleRelease :apps:android:androidApp:bundleRelease
      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-app-${{ github.sha }}
          path: apps/android/androidApp/build/outputs/

  build-daemon:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Install AArch64 Linker
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
      - uses: actions/checkout@v4
      - name: Install Rust MUSL target
        run: rustup target add x86_64-unknown-linux-musl aarch64-unknown-linux-musl
      - name: Build Daemon
        run: |
          cd apps/daemon
          cargo build --release --target x86_64-unknown-linux-musl
          cargo build --release --target aarch64-unknown-linux-musl
      - name: Upload Daemon Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: daemon-${{ github.sha }}
          path: apps/daemon/target/

  build-kernelsu-module:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
      - name: Build KernelSU Module
        run: |
          cd module
          zip -r corestate-kernelsu-module-v2.0.0.zip . -x "*.git*" "*.gradle*"
      - name: Upload KernelSU Module
        uses: actions/upload-artifact@v4
        with:
          name: kernelsu-module-${{ github.sha }}
          path: module/corestate-kernelsu-module-v2.0.0.zip

  build-microservices:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build Microservices
        run: |
          chmod +x gradlew
          ./gradlew build
          # Docker build would happen here, requires docker login etc.
          echo "Docker build placeholder for ${{ env.DOCKER_REGISTRY }}/corestate/services:${{ github.ref_name }}"

  create-release:
    # This job now only depends on the build jobs that produce release artifacts
    needs: [build-android, build-daemon, build-kernelsu-module, build-microservices]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List downloaded artifacts
        run: ls -R artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/android-app-${{ github.sha }}/**/*.apk
            artifacts/android-app-${{ github.sha }}/**/*.aab
            artifacts/kernelsu-module-${{ github.sha }}/*.zip
            artifacts/daemon-${{ github.sha }}/**/*.tar.gz 
          body: |
            # CoreState ${{ github.ref_name }} Release
            
            **CoreState v2.0** - Advanced backup and synchronization system by **Wiktor/overspend1**
            
            ## Downloads
            - **CoreState.apk** - Android application  
            - **corestate-kernelsu-module-v2.0.0.zip** - KernelSU module for system integration
            - **corestate-daemon** - Linux daemon (x86_64 & aarch64)
            
            ## Installation
            1. Install the Android APK
            2. Flash the KernelSU module via KernelSU Manager
            3. Deploy daemon on your server/NAS
            
            **Author:** Wiktor/overspend1